name: Trigger Legend Stack Release

on:
  workflow_dispatch:
    inputs:
      legend-shared-release:
        type: choice
        description: "New release version for legend shared"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-pure-release:
        type: choice
        description: "New release version for legend pure"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-engine-release:
        type: choice
        description: "New release version for legend engine"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-sdlc-release:
        type: choice
        description: "New release version for legend sdlc"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']
      legend-depot-release:
        type: choice
        description: "New release version for legend depot"
        default: 'n/a'
        options: ['n/a', 'major', 'minor', 'patch']

env:
  OWNER: finos
  RELEASE_TOKEN: Dummy
  EVENT_TYPE: legend-stack-release
  WORKFLOW_ID: legend-stack-release.yml

jobs:
  compute-versions:
    runs-on: ubuntu-latest
    outputs:
      legend_shared_release_version: ${{ steps.set_legend_shared_release_version.outputs.legend_shared_release_version }}
      legend_pure_release_version: ${{ steps.set_legend_pure_release_version.outputs.legend_pure_release_version }}
      legend_engine_release_version: ${{ steps.set_legend_engine_release_version.outputs.legend_engine_release_version }}
      legend_sdlc_release_version: ${{ steps.set_legend_sdlc_release_version.outputs.legend_sdlc_release_version }}
      legend_depot_release_version: ${{ steps.set_legend_depot_release_version.outputs.legend_depot_release_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2
      - name: Compute legend-shared-release-version
        id: set_legend_shared_release_version
        if: github.event.inputs.legend-shared-release != 'n/a'
        run: |
          legend_shared_release_version=$(bash ./scripts/compute-version.sh "legend-shared" "${{ github.event.inputs.legend-shared-release }}")
          echo "legend_shared_release_version=${legend_shared_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-pure-release-version
        id: set_legend_pure_release_version
        if: github.event.inputs.legend-pure-release != 'n/a'
        run: |
          legend_pure_release_version=$(bash ./scripts/compute-version.sh "legend-pure" "${{ github.event.inputs.legend-pure-release }}")
          echo "legend_pure_release_version=${legend_pure_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-engine-release-version
        id: set_legend_engine_release_version
        if: github.event.inputs.legend-engine-release != 'n/a'
        run: |
          legend_engine_release_version=$(bash ./scripts/compute-version.sh "legend-engine" "${{ github.event.inputs.legend-engine-release }}")
          echo "legend_engine_release_version=${legend_engine_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-sdlc-release-version
        id: set_legend_sdlc_release_version
        if: github.event.inputs.legend-sdlc-release != 'n/a'
        run: |
          legend_sdlc_release_version=$(bash ./scripts/compute-version.sh "legend-sdlc" "${{ github.event.inputs.legend-sdlc-release }}")
          echo "legend_sdlc_release_version=${legend_sdlc_release_version}" >> "$GITHUB_OUTPUT"

      - name: Compute legend-depot-release-version
        id: set_legend_depot_release_version
        if: github.event.inputs.legend-depot-release != 'n/a'
        run: |
          legend_depot_release_version=$(bash ./scripts/compute-version.sh "legend-depot" "${{ github.event.inputs.legend-depot-release }}")
          echo "legend_depot_release_version=${legend_depot_release_version}" >> "$GITHUB_OUTPUT"
  release-legend-shared:
    runs-on: ubuntu-latest
    needs: [compute-versions]
    if: github.event.inputs.legend-shared-release != 'n/a'
    steps:
      - name: Set Required RunNumber of Legend Shared Release
        run: |
          # Echo release version
          echo "legend_shared_release_version:${{ needs.compute-versions.outputs.legend_shared_release_version }}"
